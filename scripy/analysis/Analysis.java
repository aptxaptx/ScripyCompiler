/* This file was generated by SableCC (http://www.sablecc.org/). */

package scripy.analysis;

import scripy.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseACmdsGoal(ACmdsGoal node);
    void caseAFuncCommands(AFuncCommands node);
    void caseAStmtCommands(AStmtCommands node);
    void caseAFuncFunction(AFuncFunction node);
    void caseAArgArgument(AArgArgument node);
    void caseAAssignValue(AAssignValue node);
    void caseAMoreArguments(AMoreArguments node);
    void caseARule1Statement(ARule1Statement node);
    void caseARule2Statement(ARule2Statement node);
    void caseARule3Statement(ARule3Statement node);
    void caseARule4Statement(ARule4Statement node);
    void caseARule5Statement(ARule5Statement node);
    void caseARule6Statement(ARule6Statement node);
    void caseARule7Statement(ARule7Statement node);
    void caseAMoreExpressions(AMoreExpressions node);
    void caseARule2Expression(ARule2Expression node);
    void caseARule3Expression(ARule3Expression node);
    void caseAMultExpression(AMultExpression node);
    void caseAAddExpression(AAddExpression node);
    void caseAMinusExpression(AMinusExpression node);
    void caseAValueExpression(AValueExpression node);
    void caseAIdExpression(AIdExpression node);
    void caseAFuncExpression(AFuncExpression node);
    void caseAExpExpression(AExpExpression node);
    void caseAMoreValues(AMoreValues node);
    void caseAValueMultiplication(AValueMultiplication node);
    void caseAMultiplicationMultiplication(AMultiplicationMultiplication node);
    void caseARule1Comparison(ARule1Comparison node);
    void caseARule2Comparison(ARule2Comparison node);
    void caseARule3Comparison(ARule3Comparison node);
    void caseAFunctionCall(AFunctionCall node);
    void caseAArgList(AArgList node);
    void caseAMoreListArguments(AMoreListArguments node);
    void caseANumberValue(ANumberValue node);
    void caseAStringValue(AStringValue node);
    void caseAIntNumber(AIntNumber node);
    void caseAIdentifier(AIdentifier node);

    void caseTTab(TTab node);
    void caseTExMark(TExMark node);
    void caseTPlus(TPlus node);
    void caseTMinus(TMinus node);
    void caseTMult(TMult node);
    void caseTAssign(TAssign node);
    void caseTEquals(TEquals node);
    void caseTGrt(TGrt node);
    void caseTGte(TGte node);
    void caseTLt(TLt node);
    void caseTLte(TLte node);
    void caseTLeftPar(TLeftPar node);
    void caseTRightPar(TRightPar node);
    void caseTSquareRightBr(TSquareRightBr node);
    void caseTSquareLeftBr(TSquareLeftBr node);
    void caseTComma(TComma node);
    void caseTSemi(TSemi node);
    void caseTIf(TIf node);
    void caseTWhile(TWhile node);
    void caseTFor(TFor node);
    void caseTPrint(TPrint node);
    void caseTReturn(TReturn node);
    void caseTDef(TDef node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTIn(TIn node);
    void caseTBlank(TBlank node);
    void caseTLineComment(TLineComment node);
    void caseTInteger(TInteger node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
