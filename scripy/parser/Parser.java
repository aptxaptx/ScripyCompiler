/* This file was generated by SableCC (http://www.sablecc.org/). */

package scripy.parser;

import scripy.lexer.*;
import scripy.node.*;
import scripy.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PGoal node1 = (PGoal) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AAcmdsgoal1Goal */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAcmdsgoal2Goal */
            {
                ArrayList<Object> list = new1();
                push(goTo(0), list);
            }
            break;
            case 2: /* reduce AFuncCommands */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AStmtCommands */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAfuncfunction1Function */
            {
                ArrayList<Object> list = new4();
                push(goTo(2), list);
            }
            break;
            case 5: /* reduce AAfuncfunction2Function */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AAargargument1Argument */
            {
                ArrayList<Object> list = new6();
                push(goTo(3), list);
            }
            break;
            case 7: /* reduce AAargargument2Argument */
            {
                ArrayList<Object> list = new7();
                push(goTo(3), list);
            }
            break;
            case 8: /* reduce AAargargument3Argument */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AAargargument4Argument */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce AAssignValue */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAmorearguments1MoreArguments */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce AAmorearguments2MoreArguments */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce AArule1statement1Statement */
            {
                ArrayList<Object> list = new13();
                push(goTo(6), list);
            }
            break;
            case 14: /* reduce AArule1statement2Statement */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AArule2statement1Statement */
            {
                ArrayList<Object> list = new15();
                push(goTo(6), list);
            }
            break;
            case 16: /* reduce AArule2statement2Statement */
            {
                ArrayList<Object> list = new16();
                push(goTo(6), list);
            }
            break;
            case 17: /* reduce AArule3statement1Statement */
            {
                ArrayList<Object> list = new17();
                push(goTo(6), list);
            }
            break;
            case 18: /* reduce AArule3statement2Statement */
            {
                ArrayList<Object> list = new18();
                push(goTo(6), list);
            }
            break;
            case 19: /* reduce AArule4statement1Statement */
            {
                ArrayList<Object> list = new19();
                push(goTo(6), list);
            }
            break;
            case 20: /* reduce AArule4statement2Statement */
            {
                ArrayList<Object> list = new20();
                push(goTo(6), list);
            }
            break;
            case 21: /* reduce AArule4statement3Statement */
            {
                ArrayList<Object> list = new21();
                push(goTo(6), list);
            }
            break;
            case 22: /* reduce AArule4statement4Statement */
            {
                ArrayList<Object> list = new22();
                push(goTo(6), list);
            }
            break;
            case 23: /* reduce AArule5statement1Statement */
            {
                ArrayList<Object> list = new23();
                push(goTo(6), list);
            }
            break;
            case 24: /* reduce AArule5statement2Statement */
            {
                ArrayList<Object> list = new24();
                push(goTo(6), list);
            }
            break;
            case 25: /* reduce AArule6statement1Statement */
            {
                ArrayList<Object> list = new25();
                push(goTo(6), list);
            }
            break;
            case 26: /* reduce AArule6statement2Statement */
            {
                ArrayList<Object> list = new26();
                push(goTo(6), list);
            }
            break;
            case 27: /* reduce AArule7statement1Statement */
            {
                ArrayList<Object> list = new27();
                push(goTo(6), list);
            }
            break;
            case 28: /* reduce AArule7statement2Statement */
            {
                ArrayList<Object> list = new28();
                push(goTo(6), list);
            }
            break;
            case 29: /* reduce AMoreExpressions */
            {
                ArrayList<Object> list = new29();
                push(goTo(7), list);
            }
            break;
            case 30: /* reduce ARule1Expression */
            {
                ArrayList<Object> list = new30();
                push(goTo(8), list);
            }
            break;
            case 31: /* reduce ARule2Expression */
            {
                ArrayList<Object> list = new31();
                push(goTo(8), list);
            }
            break;
            case 32: /* reduce AArule3expression1Expression */
            {
                ArrayList<Object> list = new32();
                push(goTo(8), list);
            }
            break;
            case 33: /* reduce AArule3expression2Expression */
            {
                ArrayList<Object> list = new33();
                push(goTo(8), list);
            }
            break;
            case 34: /* reduce AMoreValues */
            {
                ArrayList<Object> list = new34();
                push(goTo(9), list);
            }
            break;
            case 35: /* reduce ARule1Arithmetics */
            {
                ArrayList<Object> list = new35();
                push(goTo(10), list);
            }
            break;
            case 36: /* reduce ARule2Arithmetics */
            {
                ArrayList<Object> list = new36();
                push(goTo(10), list);
            }
            break;
            case 37: /* reduce ARule3Arithmetics */
            {
                ArrayList<Object> list = new37();
                push(goTo(10), list);
            }
            break;
            case 38: /* reduce AValueMultiplication */
            {
                ArrayList<Object> list = new38();
                push(goTo(11), list);
            }
            break;
            case 39: /* reduce AMultiplicationMultiplication */
            {
                ArrayList<Object> list = new39();
                push(goTo(11), list);
            }
            break;
            case 40: /* reduce ARule1Element */
            {
                ArrayList<Object> list = new40();
                push(goTo(12), list);
            }
            break;
            case 41: /* reduce ARule2Element */
            {
                ArrayList<Object> list = new41();
                push(goTo(12), list);
            }
            break;
            case 42: /* reduce ARule3Element */
            {
                ArrayList<Object> list = new42();
                push(goTo(12), list);
            }
            break;
            case 43: /* reduce ARule4Element */
            {
                ArrayList<Object> list = new43();
                push(goTo(12), list);
            }
            break;
            case 44: /* reduce ARule1Comparison */
            {
                ArrayList<Object> list = new44();
                push(goTo(13), list);
            }
            break;
            case 45: /* reduce ARule2Comparison */
            {
                ArrayList<Object> list = new45();
                push(goTo(13), list);
            }
            break;
            case 46: /* reduce ARule3Comparison */
            {
                ArrayList<Object> list = new46();
                push(goTo(13), list);
            }
            break;
            case 47: /* reduce ARule1ComparisonOperator */
            {
                ArrayList<Object> list = new47();
                push(goTo(14), list);
            }
            break;
            case 48: /* reduce ARule2ComparisonOperator */
            {
                ArrayList<Object> list = new48();
                push(goTo(14), list);
            }
            break;
            case 49: /* reduce ARule3ComparisonOperator */
            {
                ArrayList<Object> list = new49();
                push(goTo(14), list);
            }
            break;
            case 50: /* reduce ARule4ComparisonOperator */
            {
                ArrayList<Object> list = new50();
                push(goTo(14), list);
            }
            break;
            case 51: /* reduce ARule5ComparisonOperator */
            {
                ArrayList<Object> list = new51();
                push(goTo(14), list);
            }
            break;
            case 52: /* reduce AAfunctioncall1FunctionCall */
            {
                ArrayList<Object> list = new52();
                push(goTo(15), list);
            }
            break;
            case 53: /* reduce AAfunctioncall2FunctionCall */
            {
                ArrayList<Object> list = new53();
                push(goTo(15), list);
            }
            break;
            case 54: /* reduce AAarglist1ArgList */
            {
                ArrayList<Object> list = new54();
                push(goTo(16), list);
            }
            break;
            case 55: /* reduce AAarglist2ArgList */
            {
                ArrayList<Object> list = new55();
                push(goTo(16), list);
            }
            break;
            case 56: /* reduce AMoreListArguments */
            {
                ArrayList<Object> list = new56();
                push(goTo(17), list);
            }
            break;
            case 57: /* reduce ANumberValue */
            {
                ArrayList<Object> list = new57();
                push(goTo(18), list);
            }
            break;
            case 58: /* reduce AStringValue */
            {
                ArrayList<Object> list = new58();
                push(goTo(18), list);
            }
            break;
            case 59: /* reduce AIntNumber */
            {
                ArrayList<Object> list = new59();
                push(goTo(19), list);
            }
            break;
            case 60: /* reduce AIdentifier */
            {
                ArrayList<Object> list = new60();
                push(goTo(20), list);
            }
            break;
            case 61: /* reduce ATerminal$Commands */
            {
                ArrayList<Object> list = new61();
                push(goTo(21), list);
            }
            break;
            case 62: /* reduce ANonTerminal$Commands */
            {
                ArrayList<Object> list = new62();
                push(goTo(21), list);
            }
            break;
            case 63: /* reduce ATerminal$MoreArguments */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list);
            }
            break;
            case 64: /* reduce ANonTerminal$MoreArguments */
            {
                ArrayList<Object> list = new64();
                push(goTo(22), list);
            }
            break;
            case 65: /* reduce ATerminal$Tab */
            {
                ArrayList<Object> list = new65();
                push(goTo(23), list);
            }
            break;
            case 66: /* reduce ANonTerminal$Tab */
            {
                ArrayList<Object> list = new66();
                push(goTo(23), list);
            }
            break;
            case 67: /* reduce ATerminal$MoreExpressions */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list);
            }
            break;
            case 68: /* reduce ANonTerminal$MoreExpressions */
            {
                ArrayList<Object> list = new68();
                push(goTo(24), list);
            }
            break;
            case 69: /* reduce ATerminal$MoreValues */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list);
            }
            break;
            case 70: /* reduce ANonTerminal$MoreValues */
            {
                ArrayList<Object> list = new70();
                push(goTo(25), list);
            }
            break;
            case 71: /* reduce ATerminal$MoreListArguments */
            {
                ArrayList<Object> list = new71();
                push(goTo(26), list);
            }
            break;
            case 72: /* reduce ANonTerminal$MoreListArguments */
            {
                ArrayList<Object> list = new72();
                push(goTo(26), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AAcmdsgoal1Goal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PGoal pgoalNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        }

        pgoalNode1 = new ACmdsGoal(listNode2);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAcmdsgoal2Goal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PGoal pgoalNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList1.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pgoalNode1 = new ACmdsGoal(listNode3);
        }
	nodeList.add(pgoalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AFuncCommands */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommands pcommandsNode1;
        {
            // Block
        PFunction pfunctionNode2;
        pfunctionNode2 = (PFunction)nodeArrayList1.get(0);

        pcommandsNode1 = new AFuncCommands(pfunctionNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AStmtCommands */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PCommands pcommandsNode1;
        {
            // Block
        PStatement pstatementNode2;
        pstatementNode2 = (PStatement)nodeArrayList1.get(0);

        pcommandsNode1 = new AStmtCommands(pstatementNode2);
        }
	nodeList.add(pcommandsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAfuncfunction1Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pfunctionNode1 = new AFuncFunction(pidentifierNode2, listNode3, pstatementNode4);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAfuncfunction2Function */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunction pfunctionNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        PStatement pstatementNode5;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        PArgument pargumentNode3;
        pargumentNode3 = (PArgument)nodeArrayList4.get(0);
	if(pargumentNode3 != null)
	{
	  listNode4.add(pargumentNode3);
	}
        }
        pstatementNode5 = (PStatement)nodeArrayList7.get(0);

        pfunctionNode1 = new AFuncFunction(pidentifierNode2, listNode4, pstatementNode5);
        }
	nodeList.add(pfunctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AAargargument1Argument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        }

        pargumentNode1 = new AArgArgument(pidentifierNode2, listNode3, listNode4);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AAargargument2Argument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
            // Block
        PAssignValue passignvalueNode3;
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
	if(passignvalueNode3 != null)
	{
	  listNode4.add(passignvalueNode3);
	}
        }
        {
            // Block
        }

        pargumentNode1 = new AArgArgument(pidentifierNode2, listNode4, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AAargargument3Argument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList2.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pargumentNode1 = new AArgArgument(pidentifierNode2, listNode3, listNode5);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AAargargument4Argument */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgument pargumentNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        LinkedList<Object> listNode6 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
            // Block
        PAssignValue passignvalueNode3;
        passignvalueNode3 = (PAssignValue)nodeArrayList2.get(0);
	if(passignvalueNode3 != null)
	{
	  listNode4.add(passignvalueNode3);
	}
        }
        {
            // Block
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        listNode5 = (LinkedList)nodeArrayList3.get(0);
	if(listNode5 != null)
	{
	  listNode6.addAll(listNode5);
	}
        }

        pargumentNode1 = new AArgArgument(pidentifierNode2, listNode4, listNode6);
        }
	nodeList.add(pargumentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce AAssignValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAssignValue passignvalueNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList2.get(0);

        passignvalueNode1 = new AAssignValue(pvalueNode2);
        }
	nodeList.add(passignvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAmorearguments1MoreArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreArguments pmoreargumentsNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        }

        pmoreargumentsNode1 = new AMoreArguments(pidentifierNode2, listNode3);
        }
	nodeList.add(pmoreargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce AAmorearguments2MoreArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreArguments pmoreargumentsNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        {
            // Block
        PAssignValue passignvalueNode3;
        passignvalueNode3 = (PAssignValue)nodeArrayList3.get(0);
	if(passignvalueNode3 != null)
	{
	  listNode4.add(passignvalueNode3);
	}
        }

        pmoreargumentsNode1 = new AMoreArguments(pidentifierNode2, listNode4);
        }
	nodeList.add(pmoreargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AArule1statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList2.get(0);
        pstatementNode3 = (PStatement)nodeArrayList4.get(0);

        pstatementNode1 = new ARule1Statement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AArule1statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PComparison pcomparisonNode2;
        PStatement pstatementNode3;
        pcomparisonNode2 = (PComparison)nodeArrayList3.get(0);
        pstatementNode3 = (PStatement)nodeArrayList5.get(0);

        pstatementNode1 = new ARule1Statement(pcomparisonNode2, pstatementNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AArule2statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PIdentifier pidentifierNode3;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList4.get(0);
        pstatementNode4 = (PStatement)nodeArrayList6.get(0);

        pstatementNode1 = new ARule2Statement(pidentifierNode2, pidentifierNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AArule2statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PIdentifier pidentifierNode3;
        PStatement pstatementNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList3.get(0);
        pidentifierNode3 = (PIdentifier)nodeArrayList5.get(0);
        pstatementNode4 = (PStatement)nodeArrayList7.get(0);

        pstatementNode1 = new ARule2Statement(pidentifierNode2, pidentifierNode3, pstatementNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AArule3statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pstatementNode1 = new ARule7Statement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AArule3statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new ARule7Statement(pexpressionNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AArule4statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        }

        pstatementNode1 = new ARule3Statement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AArule4statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        }

        pstatementNode1 = new ARule3Statement(pexpressionNode2, listNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AArule4statement3Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ARule3Statement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AArule4statement4Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList3.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList4.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pstatementNode1 = new ARule3Statement(pexpressionNode2, listNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce AArule5statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pstatementNode1 = new ARule4Statement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AArule5statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);

        pstatementNode1 = new ARule4Statement(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AArule6statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList6.get(0);

        pstatementNode1 = new ARule5Statement(pidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AArule6statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        PExpression pexpressionNode4;
        pidentifierNode2 = (PIdentifier)nodeArrayList2.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList4.get(0);
        pexpressionNode4 = (PExpression)nodeArrayList7.get(0);

        pstatementNode1 = new ARule5Statement(pidentifierNode2, pexpressionNode3, pexpressionNode4);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AArule7statement1Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pstatementNode1 = new ARule6Statement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AArule7statement2Statement */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PStatement pstatementNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList2.get(0);

        pstatementNode1 = new ARule6Statement(pfunctioncallNode2);
        }
	nodeList.add(pstatementNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AMoreExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreExpressions pmoreexpressionsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pmoreexpressionsNode1 = new AMoreExpressions(pexpressionNode2);
        }
	nodeList.add(pmoreexpressionsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ARule1Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce ARule2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        PExpression pexpressionNode3;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new ARule2Expression(pidentifierNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AArule3expression1Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
        {
            // Block
        }

        pexpressionNode1 = new ARule3Expression(pvalueNode2, listNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AArule3expression2Expression */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pvalueNode2 = (PValue)nodeArrayList2.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pexpressionNode1 = new ARule3Expression(pvalueNode2, listNode4);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AMoreValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreValues pmorevaluesNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList2.get(0);

        pmorevaluesNode1 = new AMoreValues(pvalueNode2);
        }
	nodeList.add(pmorevaluesNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce ARule1Arithmetics */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce ARule2Arithmetics */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AAddExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce ARule3Arithmetics */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMinusExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AValueMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        pexpressionNode1 = (PExpression)nodeArrayList1.get(0);
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMultiplicationMultiplication */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pexpressionNode1 = new AMultExpression(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce ARule1Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PValue pvalueNode2;
        pvalueNode2 = (PValue)nodeArrayList1.get(0);

        pexpressionNode1 = new AValueExpression(pvalueNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ARule2Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);

        pexpressionNode1 = new AIdExpression(pidentifierNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce ARule3Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PFunctionCall pfunctioncallNode2;
        pfunctioncallNode2 = (PFunctionCall)nodeArrayList1.get(0);

        pexpressionNode1 = new AFuncExpression(pfunctioncallNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce ARule4Element */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpression pexpressionNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pexpressionNode1 = new AExpExpression(pexpressionNode2);
        }
	nodeList.add(pexpressionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ARule1Comparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        PExpression pexpressionNode2;
        PExpression pexpressionNode3;
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        pexpressionNode3 = (PExpression)nodeArrayList3.get(0);

        pcomparisonNode1 = new ARule1Comparison(pexpressionNode2, pexpressionNode3);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ARule2Comparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        pcomparisonNode1 = new ARule2Comparison(ttrueNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce ARule3Comparison */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PComparison pcomparisonNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        pcomparisonNode1 = new ARule3Comparison(tfalseNode2);
        }
	nodeList.add(pcomparisonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ARule1ComparisonOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce ARule2ComparisonOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ARule3ComparisonOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ARule4ComparisonOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ARule5ComparisonOperator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce AAfunctioncall1FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
            // Block
        }

        pfunctioncallNode1 = new AFunctionCall(pidentifierNode2, listNode3);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AAfunctioncall2FunctionCall */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFunctionCall pfunctioncallNode1;
        {
            // Block
        PIdentifier pidentifierNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pidentifierNode2 = (PIdentifier)nodeArrayList1.get(0);
        {
            // Block
        PArgList parglistNode3;
        parglistNode3 = (PArgList)nodeArrayList3.get(0);
	if(parglistNode3 != null)
	{
	  listNode4.add(parglistNode3);
	}
        }

        pfunctioncallNode1 = new AFunctionCall(pidentifierNode2, listNode4);
        }
	nodeList.add(pfunctioncallNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AAarglist1ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        }

        parglistNode1 = new AArgList(pexpressionNode2, listNode3);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAarglist2ArgList */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PArgList parglistNode1;
        {
            // Block
        PExpression pexpressionNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        pexpressionNode2 = (PExpression)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        parglistNode1 = new AArgList(pexpressionNode2, listNode4);
        }
	nodeList.add(parglistNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AMoreListArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PMoreListArguments pmorelistargumentsNode1;
        {
            // Block
        PExpression pexpressionNode2;
        pexpressionNode2 = (PExpression)nodeArrayList2.get(0);

        pmorelistargumentsNode1 = new AMoreListArguments(pexpressionNode2);
        }
	nodeList.add(pmorelistargumentsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce ANumberValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        PNumber pnumberNode2;
        pnumberNode2 = (PNumber)nodeArrayList1.get(0);

        pvalueNode1 = new ANumberValue(pnumberNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AStringValue */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PValue pvalueNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        pvalueNode1 = new AStringValue(tstringNode2);
        }
	nodeList.add(pvalueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AIntNumber */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PNumber pnumberNode1;
        {
            // Block
        TInteger tintegerNode2;
        tintegerNode2 = (TInteger)nodeArrayList1.get(0);

        pnumberNode1 = new AIntNumber(tintegerNode2);
        }
	nodeList.add(pnumberNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AIdentifier */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PIdentifier pidentifierNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        pidentifierNode1 = new AIdentifier(tidNode2);
        }
	nodeList.add(pidentifierNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ATerminal$Commands */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PCommands pcommandsNode1;
        pcommandsNode1 = (PCommands)nodeArrayList1.get(0);
	if(pcommandsNode1 != null)
	{
	  listNode2.add(pcommandsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ANonTerminal$Commands */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PCommands pcommandsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pcommandsNode2 = (PCommands)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pcommandsNode2 != null)
	{
	  listNode3.add(pcommandsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ATerminal$MoreArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMoreArguments pmoreargumentsNode1;
        pmoreargumentsNode1 = (PMoreArguments)nodeArrayList1.get(0);
	if(pmoreargumentsNode1 != null)
	{
	  listNode2.add(pmoreargumentsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ANonTerminal$MoreArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMoreArguments pmoreargumentsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoreargumentsNode2 = (PMoreArguments)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoreargumentsNode2 != null)
	{
	  listNode3.add(pmoreargumentsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ATerminal$Tab */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TTab ttabNode1;
        ttabNode1 = (TTab)nodeArrayList1.get(0);
	if(ttabNode1 != null)
	{
	  listNode2.add(ttabNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ANonTerminal$Tab */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TTab ttabNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        ttabNode2 = (TTab)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(ttabNode2 != null)
	{
	  listNode3.add(ttabNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ATerminal$MoreExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMoreExpressions pmoreexpressionsNode1;
        pmoreexpressionsNode1 = (PMoreExpressions)nodeArrayList1.get(0);
	if(pmoreexpressionsNode1 != null)
	{
	  listNode2.add(pmoreexpressionsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ANonTerminal$MoreExpressions */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMoreExpressions pmoreexpressionsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmoreexpressionsNode2 = (PMoreExpressions)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmoreexpressionsNode2 != null)
	{
	  listNode3.add(pmoreexpressionsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ATerminal$MoreValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMoreValues pmorevaluesNode1;
        pmorevaluesNode1 = (PMoreValues)nodeArrayList1.get(0);
	if(pmorevaluesNode1 != null)
	{
	  listNode2.add(pmorevaluesNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new70() /* reduce ANonTerminal$MoreValues */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMoreValues pmorevaluesNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmorevaluesNode2 = (PMoreValues)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmorevaluesNode2 != null)
	{
	  listNode3.add(pmorevaluesNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new71() /* reduce ATerminal$MoreListArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PMoreListArguments pmorelistargumentsNode1;
        pmorelistargumentsNode1 = (PMoreListArguments)nodeArrayList1.get(0);
	if(pmorelistargumentsNode1 != null)
	{
	  listNode2.add(pmorelistargumentsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new72() /* reduce ANonTerminal$MoreListArguments */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PMoreListArguments pmorelistargumentsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pmorelistargumentsNode2 = (PMoreListArguments)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pmorelistargumentsNode2 != null)
	{
	  listNode3.add(pmorelistargumentsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 0}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 65}, },
			{{-1, ERROR, 2}, {11, SHIFT, 16}, {14, SHIFT, 17}, {23, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 3}, {27, SHIFT, 7}, },
			{{-1, ERROR, 4}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 5}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 6}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 8}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 61}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 13}, {5, SHIFT, 35}, {11, SHIFT, 36}, {14, SHIFT, 37}, },
			{{-1, REDUCE, 1}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {22, SHIFT, 6}, {27, SHIFT, 7}, },
			{{-1, ERROR, 15}, {0, SHIFT, 39}, {17, SHIFT, 40}, {19, SHIFT, 41}, {20, SHIFT, 42}, {21, SHIFT, 43}, {27, SHIFT, 7}, },
			{{-1, ERROR, 16}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 17}, {26, SHIFT, 20}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 58}, },
			{{-1, ERROR, 22}, {6, SHIFT, 48}, {7, SHIFT, 49}, {8, SHIFT, 50}, {9, SHIFT, 51}, {10, SHIFT, 52}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 35}, {2, SHIFT, 54}, {3, SHIFT, 55}, {4, SHIFT, 56}, },
			{{-1, REDUCE, 38}, },
			{{-1, ERROR, 26}, {16, SHIFT, 57}, },
			{{-1, REDUCE, 42}, },
			{{-1, REDUCE, 40}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 41}, {11, SHIFT, 36}, {14, SHIFT, 58}, },
			{{-1, ERROR, 31}, {25, SHIFT, 59}, },
			{{-1, REDUCE, 19}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 34}, {11, SHIFT, 63}, },
			{{-1, ERROR, 35}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 36}, {11, SHIFT, 16}, {12, SHIFT, 65}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 37}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 66}, },
			{{-1, ERROR, 40}, {11, SHIFT, 16}, {14, SHIFT, 17}, {23, SHIFT, 18}, {24, SHIFT, 19}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 41}, {27, SHIFT, 7}, },
			{{-1, ERROR, 42}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 43}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 28}, },
			{{-1, ERROR, 45}, {5, SHIFT, 73}, {11, SHIFT, 36}, {14, SHIFT, 74}, },
			{{-1, ERROR, 46}, {12, SHIFT, 75}, },
			{{-1, ERROR, 47}, {13, SHIFT, 76}, {15, SHIFT, 77}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 47}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 50}, },
			{{-1, ERROR, 53}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 54}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 55}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 56}, {11, SHIFT, 16}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 57}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {27, SHIFT, 7}, },
			{{-1, ERROR, 58}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 59}, {27, SHIFT, 7}, },
			{{-1, ERROR, 60}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 67}, },
			{{-1, REDUCE, 21}, {15, SHIFT, 60}, },
			{{-1, ERROR, 63}, {12, SHIFT, 90}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 54}, {15, SHIFT, 93}, },
			{{-1, ERROR, 67}, {12, SHIFT, 96}, },
			{{-1, ERROR, 68}, {13, SHIFT, 97}, },
			{{-1, ERROR, 69}, {16, SHIFT, 98}, },
			{{-1, ERROR, 70}, {25, SHIFT, 99}, },
			{{-1, REDUCE, 20}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 18}, },
			{{-1, ERROR, 73}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, ERROR, 74}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 43}, },
			{{-1, REDUCE, 32}, },
			{{-1, ERROR, 77}, {26, SHIFT, 20}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 69}, },
			{{-1, ERROR, 79}, {13, SHIFT, 104}, {15, SHIFT, 77}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 36}, },
			{{-1, REDUCE, 37}, },
			{{-1, REDUCE, 39}, },
			{{-1, REDUCE, 41}, {11, SHIFT, 36}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 86}, {13, SHIFT, 106}, },
			{{-1, ERROR, 87}, {16, SHIFT, 107}, },
			{{-1, REDUCE, 29}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 90}, {16, SHIFT, 108}, },
			{{-1, ERROR, 91}, {12, SHIFT, 109}, },
			{{-1, REDUCE, 6}, {5, SHIFT, 110}, {15, SHIFT, 111}, },
			{{-1, ERROR, 93}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 71}, },
			{{-1, REDUCE, 55}, {15, SHIFT, 93}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 97}, {5, SHIFT, 117}, },
			{{-1, ERROR, 98}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {27, SHIFT, 7}, },
			{{-1, ERROR, 99}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 22}, {15, SHIFT, 60}, },
			{{-1, REDUCE, 24}, },
			{{-1, ERROR, 102}, {13, SHIFT, 120}, },
			{{-1, REDUCE, 34}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 70}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 107}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {27, SHIFT, 7}, },
			{{-1, ERROR, 108}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {27, SHIFT, 7}, },
			{{-1, ERROR, 109}, {16, SHIFT, 123}, },
			{{-1, ERROR, 110}, {26, SHIFT, 20}, {28, SHIFT, 21}, },
			{{-1, ERROR, 111}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 7}, {15, SHIFT, 111}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 8}, {15, SHIFT, 111}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 72}, },
			{{-1, ERROR, 117}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 119}, {16, SHIFT, 129}, },
			{{-1, ERROR, 120}, {5, SHIFT, 130}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 123}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {27, SHIFT, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, REDUCE, 11}, {5, SHIFT, 110}, },
			{{-1, REDUCE, 9}, {15, SHIFT, 111}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 129}, {0, SHIFT, 1}, {17, SHIFT, 2}, {19, SHIFT, 3}, {20, SHIFT, 4}, {21, SHIFT, 5}, {27, SHIFT, 7}, },
			{{-1, ERROR, 130}, {11, SHIFT, 16}, {14, SHIFT, 17}, {26, SHIFT, 20}, {27, SHIFT, 7}, {28, SHIFT, 21}, },
			{{-1, REDUCE, 5}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 26}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 8}, },
			{{-1, 9}, {14, 38}, },
			{{-1, 10}, },
			{{-1, 91}, },
			{{-1, 112}, {125, 132}, },
			{{-1, 113}, {114, 127}, {126, 127}, },
			{{-1, 11}, {57, 85}, {98, 118}, {107, 121}, {108, 122}, {123, 131}, {129, 133}, },
			{{-1, 61}, {62, 89}, {100, 89}, },
			{{-1, 22}, {4, 32}, {5, 33}, {16, 46}, {35, 64}, {36, 66}, {37, 68}, {42, 71}, {43, 72}, {53, 80}, {54, 81}, {55, 82}, {58, 86}, {60, 88}, {73, 101}, {74, 102}, {93, 115}, {117, 128}, {130, 134}, },
			{{-1, 78}, {79, 105}, },
			{{-1, 23}, },
			{{-1, 24}, },
			{{-1, 25}, {56, 83}, },
			{{-1, 26}, {40, 69}, },
			{{-1, 53}, },
			{{-1, 27}, {0, 12}, {14, 12}, {15, 44}, {57, 12}, {98, 12}, {107, 12}, {108, 12}, {123, 12}, {129, 12}, },
			{{-1, 67}, },
			{{-1, 94}, {95, 116}, },
			{{-1, 28}, {17, 47}, {77, 103}, {110, 124}, },
			{{-1, 29}, },
			{{-1, 30}, {0, 13}, {3, 31}, {6, 34}, {14, 13}, {15, 45}, {41, 70}, {56, 84}, {57, 13}, {59, 87}, {63, 92}, {98, 13}, {99, 119}, {107, 13}, {108, 13}, {111, 125}, {123, 13}, {129, 13}, },
			{{-1, 14}, },
			{{-1, 114}, {112, 126}, },
			{{-1, 15}, },
			{{-1, 62}, {71, 100}, },
			{{-1, 79}, },
			{{-1, 95}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: tab, 'if', 'for', 'print', 'return', 'def', id, EOF",
			"expecting: tab, 'if', 'for', 'print', 'return', id",
			"expecting: '(', '[', 'true', 'false', integer, id, string",
			"expecting: id",
			"expecting: '(', '[', integer, id, string",
			"expecting: tab, '+', '-', '*', '=', '==', '>', '>=', '<', '<=', '(', ')', ']', '[', ',', ':', 'if', 'for', 'print', 'return', 'def', 'in', id, EOF",
			"expecting: EOF",
			"expecting: '=', '(', '['",
			"expecting: integer, string",
			"expecting: ':'",
			"expecting: tab, '+', '-', '*', '==', '>', '>=', '<', '<=', ')', ']', ',', ':', 'if', 'for', 'print', 'return', 'def', id, EOF",
			"expecting: '==', '>', '>=', '<', '<='",
			"expecting: tab, '==', '>', '>=', '<', '<=', ')', ']', ',', ':', 'if', 'for', 'print', 'return', 'def', id, EOF",
			"expecting: tab, '+', '-', '*', '==', '>', '>=', '<', '<=', '(', ')', ']', '[', ',', ':', 'if', 'for', 'print', 'return', 'def', id, EOF",
			"expecting: 'in'",
			"expecting: tab, ',', 'if', 'for', 'print', 'return', 'def', id, EOF",
			"expecting: '('",
			"expecting: '(', ')', '[', integer, id, string",
			"expecting: ')'",
			"expecting: ']', ','",
			"expecting: '(', integer, id, string",
			"expecting: ')', id",
			"expecting: ')', ','",
			"expecting: ']'",
			"expecting: tab, '+', '-', '*', '==', '>', '>=', '<', '<=', '(', ')', ']', ',', ':', 'if', 'for', 'print', 'return', 'def', id, EOF",
			"expecting: '=', ')', ','",
			"expecting: '='",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 4, 3, 5, 6, 0, 0, 0, 0, 7, 0, 1, 4, 8, 9, 9, 10, 10, 11, 12, 10, 10, 9, 10, 10, 10, 13, 14, 15, 0, 16, 4, 17, 4, 0, 1, 2, 3, 4, 4, 0, 7, 18, 19, 4, 4, 4, 4, 4, 4, 4, 4, 20, 1, 4, 3, 4, 15, 15, 21, 0, 10, 22, 18, 23, 9, 14, 15, 0, 4, 4, 10, 12, 8, 19, 19, 9, 12, 12, 10, 24, 0, 23, 9, 15, 15, 9, 18, 25, 4, 22, 22, 10, 26, 1, 3, 15, 0, 23, 19, 12, 19, 12, 1, 1, 9, 8, 3, 22, 22, 22, 22, 22, 4, 0, 9, 26, 0, 0, 1, 22, 25, 22, 22, 0, 1, 4, 0, 22, 0, 0, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
