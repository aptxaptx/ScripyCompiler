/* This file was generated by SableCC (http://www.sablecc.org/). */

package scripy.node;

import java.util.*;
import scripy.analysis.*;

@SuppressWarnings("nls")
public final class ARule3Expression extends PExpression
{
    private PValue _value_;
    private final LinkedList<PMoreValues> _moreValues_ = new LinkedList<PMoreValues>();

    public ARule3Expression()
    {
        // Constructor
    }

    public ARule3Expression(
        @SuppressWarnings("hiding") PValue _value_,
        @SuppressWarnings("hiding") List<?> _moreValues_)
    {
        // Constructor
        setValue(_value_);

        setMoreValues(_moreValues_);

    }

    @Override
    public Object clone()
    {
        return new ARule3Expression(
            cloneNode(this._value_),
            cloneList(this._moreValues_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseARule3Expression(this);
    }

    public PValue getValue()
    {
        return this._value_;
    }

    public void setValue(PValue node)
    {
        if(this._value_ != null)
        {
            this._value_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._value_ = node;
    }

    public LinkedList<PMoreValues> getMoreValues()
    {
        return this._moreValues_;
    }

    public void setMoreValues(List<?> list)
    {
        for(PMoreValues e : this._moreValues_)
        {
            e.parent(null);
        }
        this._moreValues_.clear();

        for(Object obj_e : list)
        {
            PMoreValues e = (PMoreValues) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._moreValues_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._value_)
            + toString(this._moreValues_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._value_ == child)
        {
            this._value_ = null;
            return;
        }

        if(this._moreValues_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._value_ == oldChild)
        {
            setValue((PValue) newChild);
            return;
        }

        for(ListIterator<PMoreValues> i = this._moreValues_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PMoreValues) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
